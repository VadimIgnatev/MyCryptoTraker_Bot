import logging
import asyncio
from datetime import datetime, date

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from config import BOT_TOKEN
import database
import api  # —Å–æ–¥–µ—Ä–∂–∏—Ç is_pair_valid –∏ get_current_price

logging.basicConfig(level=logging.INFO)

class AddTx(StatesGroup):
    waiting_for_data = State()

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

def main_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é",   callback_data="add_transaction")],
        [InlineKeyboardButton("üíº –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å",     callback_data="show_portfolio")],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",         callback_data="edit_transactions")],
        [InlineKeyboardButton("üìä –î–æ–ª—è –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ",       callback_data="allocation")],
        [InlineKeyboardButton("üìù –°–≤–æ–¥–∫–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π",     callback_data="summary")],
    ])

@dp.message(Command("start"))
async def cmd_start(message: Message):
    await database.init_db()
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –∫—Ä–∏–ø—Ç–æ-–≥–µ–Ω–∏–π! üí°\n\n"
        "–í–µ–¥–∏ —É—á—ë—Ç —Å–¥–µ–ª–æ–∫, —Å–ª–µ–¥–∏ –∑–∞ –¥–æ–ª—è–º–∏ –∏ –ø–æ–ª—É—á–∞–π —Å–≤–æ–¥–∫—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π! "
        "–í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —É–º–Ω–æ–≥–æ –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞ —Å–æ–±—Ä–∞–Ω—ã –≤ –æ–¥–Ω–æ–º –±–æ—Ç–µ.",
        reply_markup=main_menu()
    )

@dp.callback_query(F.data == "add_transaction")
async def add_tx_cb(cq: CallbackQuery, state: FSMContext):
    await cq.message.edit_text(
        "üì• –í–≤–µ–¥–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: SYMBOL AMOUNT PRICE [YYYY-MM-DD]\n"
        "–ü—Ä–∏–º–µ—Ä: <b>BTC 0.02 50000 2024-06-11</b>\n"
        "–ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ ‚Äî –±—É–¥–µ—Ç —Å–µ–≥–æ–¥–Ω—è.",
        parse_mode="HTML"
    )
    await state.set_state(AddTx.waiting_for_data)
    await cq.answer()

@dp.message(AddTx.waiting_for_data)
async def process_tx(message: Message, state: FSMContext):
    parts = message.text.strip().split()
    if len(parts) not in (3, 4):
        return await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    raw, a_str, p_str = parts[:3]
    d_str = parts[3] if len(parts) == 4 else None

    try:
        amount = float(a_str.replace(",", "."))
        buy_price = float(p_str.replace(",", "."))
    except ValueError:
        return await message.reply("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")

    if d_str:
        try:
            purchase_date = datetime.strptime(d_str, "%Y-%m-%d").date()
        except ValueError:
            return await message.reply("‚ùå –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD.")
    else:
        purchase_date = date.today()

    symbol = raw.upper()
    if not symbol.endswith("USDT"):
        symbol += "USDT"

    if not await api.is_pair_valid(symbol):
        await state.clear()
        return await message.reply(f"‚ùå –ü–∞—Ä–∞ {symbol} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ Binance.")

    await database.add_transaction(
        user_id=message.chat.id,
        coin=symbol,
        amount=amount,
        buy_price=buy_price,
        date=purchase_date
    )

    await message.reply(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {symbol} {amount} @ {buy_price} ({purchase_date})")
    await state.clear()
    await message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=main_menu())

@dp.callback_query(F.data == "show_portfolio")
async def show_portfolio_cb(cq: CallbackQuery):
    recs = await database.get_portfolio(cq.message.chat.id)
    if not recs:
        await cq.message.edit_text("üìâ –ü–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç.", reply_markup=main_menu())
    else:
        lines = []
        total_pnl = 0
        for coin, amt, avg in recs:
            cur = await api.get_current_price(coin)
            pnl = (cur - avg) * amt
            pct = pnl / (avg * amt) * 100
            lines.append(
                f"<b>{coin}</b>:\n"
                f"  ‚Ä¢ –ö–æ–ª-–≤–æ: {amt}\n"
                f"  ‚Ä¢ avg: {avg:.2f}\n"
                f"  ‚Ä¢ —Ç–µ–∫: {cur:.2f}\n"
                f"  ‚Ä¢ PnL: {pnl:+.2f} USDT ({pct:+.2f}%)\n"
            )
            total_pnl += pnl
        text = "\n".join(lines) + f"\n<b>–û–±—â–∏–π PnL:</b> {total_pnl:.2f} USDT"
        await cq.message.edit_text(text, parse_mode="HTML", reply_markup=main_menu())
    await cq.answer()

@dp.callback_query(F.data == "edit_transactions")
async def edit_transactions_cb(cq: CallbackQuery):
    recs = await database.get_all_transactions(cq.message.chat.id)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(f"{r['coin']} {r['amount']} @ {r['buy_price']}", callback_data=f"del_{r['id']}")]
        for r in recs
    ] + [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]])
    await cq.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–¥–µ–ª–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)
    await cq.answer()

@dp.callback_query(F.data.startswith("del_"))
async def delete_tx_cb(cq: CallbackQuery):
    tx_id = int(cq.data.split("_", 1)[1])
    await database.delete_transaction(tx_id)
    await cq.answer("‚úÖ –£–¥–∞–ª–µ–Ω–æ")
    return await edit_transactions_cb(cq)

@dp.callback_query(F.data == "allocation")
async def allocation_cb(cq: CallbackQuery):
    recs = await database.get_portfolio(cq.message.chat.id)
    if not recs:
        text = "üìâ –ü–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç."
    else:
        # —Å—á–∏—Ç–∞–µ–º —Å—É–º–º—É —Ç–µ–∫—É—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        vals = [(coin, amt * await api.get_current_price(coin)) for coin, amt, _ in recs]
        total = sum(v for _, v in vals)
        # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é
        vals.sort(key=lambda x: x[1], reverse=True)
        text = "üìä –î–æ–ª—è –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ:\n\n" + "\n".join(
            f"üîπ {coin}: {v/total*100:.2f}%"
            for coin, v in vals
        )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    await cq.message.edit_text(text, reply_markup=kb)
    await cq.answer()

@dp.callback_query(F.data == "summary")
async def summary_cb(cq: CallbackQuery):
    recs = await database.get_portfolio(cq.message.chat.id)
    if not recs:
        text = "üìâ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–≤–æ–¥–∫–∏."
    else:
        lines = []
        invested = 0
        current = 0
        for coin, amt, avg in recs:
            inv = amt * avg
            curv = amt * await api.get_current_price(coin)
            lines.append(f"‚Ä¢ {coin}: –≤–ª–æ–∂–µ–Ω–æ {inv:.2f} USDT, —Å–µ–π—á–∞—Å {curv:.2f} USDT")
            invested += inv
            current += curv
        lines.append(f"\n<b>–í—Å–µ–≥–æ –≤–ª–æ–∂–µ–Ω–æ:</b> {invested:.2f} USDT")
        lines.append(f"<b>–¢–µ–∫—É—â–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å:</b> {current:.2f} USDT")
        text = "\n".join(lines)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    await cq.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
    await cq.answer()

@dp.callback_query(F.data == "main_menu")
async def back_to_menu(cq: CallbackQuery):
    await cq.message.edit_text("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=main_menu())
    await cq.answer()

async def take_snapshot():
    for uid in await database.get_all_chat_ids():
        recs = await database.get_portfolio(uid)
        total = sum(amt * await api.get_current_price(coin) for coin, amt, _ in recs)
        await database.add_snapshot(uid, total)

async def main():
    await database.init_db()
    scheduler = AsyncIOScheduler()
    scheduler.add_job(take_snapshot, "interval", hours=6)
    scheduler.start()
    logging.info("–°—Ç–∞—Ä—Ç polling")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
